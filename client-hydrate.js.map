{"version":3,"file":"client-hydrate.js","sourceRoot":"","sources":["src/client-hydrate.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Client-side hydration for server-side rendered Lit components\n * \n * This file should be loaded on the client after the SSR'd HTML has been received.\n * It will hydrate the components, making them interactive.\n */\n\n// Must be imported before lit to enable hydration support\nimport '@lit-labs/ssr-client/lit-element-hydrate-support.js';\n\n// Import the component definitions for client-side use\nimport './simple-greeting.js';\n\n// Polyfill for declarative shadow root (for browsers that don't support it natively)\n// Note: In production, load this from a CDN or install as a dependency\ndeclare global {\n  function hasNativeDeclarativeShadowRoots(): boolean;\n  function hydrateShadowRoots(root: Element): void;\n}\n\n/**\n * Initialize client-side hydration\n */\nexport function initializeHydration() {\n  // Check if we need to polyfill declarative shadow roots\n  if (typeof hasNativeDeclarativeShadowRoots === 'function' && !hasNativeDeclarativeShadowRoots()) {\n    console.log('ðŸ”„ Polyfilling declarative shadow roots...');\n    if (typeof hydrateShadowRoots === 'function') {\n      hydrateShadowRoots(document.body);\n    }\n  } else {\n    console.log('âœ… Native declarative shadow root support detected or polyfill not loaded');\n  }\n\n  console.log('ðŸš€ Client hydration initialized');\n  \n  // Optional: Add some interactivity examples\n  addInteractivityExamples();\n}\n\n/**\n * Add some interactive examples to demonstrate hydration\n */\nfunction addInteractivityExamples() {\n  // Find all simple-greeting components\n  const greetings = document.querySelectorAll('simple-greeting');\n  \n  greetings.forEach((greeting, index) => {\n    // Add a click handler to demonstrate interactivity\n    greeting.addEventListener('click', () => {\n      const currentName = greeting.getAttribute('name') || 'Unknown';\n      const newName = `Clicked ${currentName} (${Date.now()})`;\n      greeting.setAttribute('name', newName);\n      console.log(`Updated greeting ${index + 1} to: ${newName}`);\n    });\n  });\n\n  // Example: Update one component after a delay\n  setTimeout(() => {\n    const interactiveGreeting = document.getElementById('interactive-greeting');\n    if (interactiveGreeting) {\n      interactiveGreeting.setAttribute('name', 'Dynamically Updated!');\n      console.log('ðŸ”„ Updated interactive greeting component');\n    }\n  }, 2000);\n\n  // Example: Add a button to create new components dynamically\n  addDynamicComponentExample();\n}\n\n/**\n * Add an example of creating components dynamically after hydration\n */\nfunction addDynamicComponentExample() {\n  const container = document.querySelector('.container');\n  if (!container) return;\n\n  // Create a section for dynamic components\n  const dynamicSection = document.createElement('div');\n  dynamicSection.className = 'component-container';\n  dynamicSection.innerHTML = `\n    <h2>Dynamic Components (Client-Side Only):</h2>\n    <button id=\"add-component\" style=\"margin: 10px 0; padding: 8px 16px; background: #007acc; color: white; border: none; border-radius: 4px; cursor: pointer;\">\n      Add New Greeting Component\n    </button>\n    <div id=\"dynamic-components\"></div>\n  `;\n  \n  container.appendChild(dynamicSection);\n\n  // Add click handler for the button\n  const addButton = document.getElementById('add-component');\n  const dynamicContainer = document.getElementById('dynamic-components');\n  let componentCount = 0;\n\n  addButton?.addEventListener('click', () => {\n    componentCount++;\n    const newGreeting = document.createElement('simple-greeting');\n    newGreeting.setAttribute('name', `Dynamic Component #${componentCount}`);\n    newGreeting.style.margin = '10px 0';\n    newGreeting.style.display = 'block';\n    \n    dynamicContainer?.appendChild(newGreeting);\n    \n    console.log(`Created dynamic component #${componentCount}`);\n  });\n}\n\n// Auto-initialize when the DOM is ready\nif (document.readyState === 'loading') {\n  document.addEventListener('DOMContentLoaded', initializeHydration);\n} else {\n  initializeHydration();\n}"]}