{"version":3,"file":"my-element.stories.js","sourceRoot":"","sources":["src/my-element.stories.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,IAAI,EAAE,MAAM,KAAK,CAAC;AAC3B,OAAO,iBAAiB,CAAC;AAEzB,kFAAkF;AAClF,MAAM,IAAI,GAAS;IACjB,KAAK,EAAE,mBAAmB;IAC1B,IAAI,EAAE,CAAC,UAAU,CAAC;IAClB,MAAM,EAAE,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAA;YACZ,IAAI,CAAC,IAAI;aACR,IAAI,CAAC,KAAK;qBACF,CAAC,CAAc,EAAE,EAAE,CAAC,OAAO,CAAC,GAAG,CAAC,gBAAgB,EAAE,CAAC,CAAC,MAAM,CAAC;iBAC/D;IACf,QAAQ,EAAE;QACR,IAAI,EAAE,EAAE,OAAO,EAAE,MAAM,EAAE;QACzB,KAAK,EAAE,EAAE,OAAO,EAAE,QAAQ,EAAE;KAC7B;CACF,CAAC;AAEF,eAAe,IAAI,CAAC;AAGpB,wFAAwF;AACxF,MAAM,CAAC,MAAM,OAAO,GAAU;IAC5B,IAAI,EAAE;QACJ,IAAI,EAAE,OAAO;QACb,KAAK,EAAE,CAAC;KACT;CACF,CAAC;AAEF,MAAM,CAAC,MAAM,cAAc,GAAU;IACnC,IAAI,EAAE;QACJ,IAAI,EAAE,gBAAgB;QACtB,KAAK,EAAE,CAAC;KACT;CACF,CAAC;AAEF,MAAM,CAAC,MAAM,gBAAgB,GAAU;IACrC,IAAI,EAAE;QACJ,IAAI,EAAE,SAAS;QACf,KAAK,EAAE,CAAC;KACT;CACF,CAAC;AAEF,MAAM,CAAC,MAAM,eAAe,GAAU;IACpC,IAAI,EAAE;QACJ,IAAI,EAAE,OAAO;QACb,KAAK,EAAE,CAAC;KACT;IACD,MAAM,EAAE,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAA;YACZ,IAAI,CAAC,IAAI;aACR,IAAI,CAAC,KAAK;;;;gBAIP;CACf,CAAC","sourcesContent":["import type { Meta, StoryObj } from '@storybook/web-components';\nimport { html } from 'lit';\nimport './my-element.js';\n\n// More on how to set up stories at: https://storybook.js.org/docs/writing-stories\nconst meta: Meta = {\n  title: 'Example/MyElement',\n  tags: ['autodocs'],\n  render: (args) => html`<my-element \n    .name=${args.name} \n    .count=${args.count}\n    @count-changed=${(e: CustomEvent) => console.log('Count changed:', e.detail)}\n  ></my-element>`,\n  argTypes: {\n    name: { control: 'text' },\n    count: { control: 'number' },\n  },\n};\n\nexport default meta;\ntype Story = StoryObj;\n\n// More on writing stories with args: https://storybook.js.org/docs/writing-stories/args\nexport const Primary: Story = {\n  args: {\n    name: 'World',\n    count: 0,\n  },\n};\n\nexport const WithCustomName: Story = {\n  args: {\n    name: 'Storybook User',\n    count: 0,\n  },\n};\n\nexport const WithInitialCount: Story = {\n  args: {\n    name: 'Counter',\n    count: 5,\n  },\n};\n\nexport const WithSlotContent: Story = {\n  args: {\n    name: 'World',\n    count: 0,\n  },\n  render: (args) => html`<my-element \n    .name=${args.name} \n    .count=${args.count}\n  >\n    <p>This is slotted content!</p>\n    <span style=\"color: blue;\">You can add any HTML here.</span>\n  </my-element>`,\n};"]}