{"version":3,"file":"ssr-server.js","sourceRoot":"","sources":["src/ssr-server.ts"],"names":[],"mappings":"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","sourcesContent":["import {render} from '@lit-labs/ssr';\nimport {html} from '@lit-labs/ssr';\nimport {collectResult} from '@lit-labs/ssr/lib/render-result.js';\nimport {RenderResultReadable} from '@lit-labs/ssr/lib/render-result-readable.js';\nimport * as http from 'http';\nimport * as url from 'url';\nimport * as fs from 'fs';\nimport * as path from 'path';\n\n// Import your component for SSR\nimport './simple-greeting.js';\n\n// Enable connectedCallback for @lit/context and other features\n(globalThis as any).litSsrCallConnectedCallback = true;\n\n/**\n * Server-only template that renders a complete HTML document\n * with your simple-greeting component\n */\nconst renderPage = (name: string = 'World') => html`\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <title>SSR Lit Component - Simple Greeting</title>\n  <style>\n    body {\n      font-family: Arial, sans-serif;\n      margin: 0;\n      padding: 20px;\n      background-color: #f5f5f5;\n    }\n    .container {\n      max-width: 800px;\n      margin: 0 auto;\n      background: white;\n      padding: 20px;\n      border-radius: 8px;\n      box-shadow: 0 2px 10px rgba(0,0,0,0.1);\n    }\n    h1 {\n      color: #333;\n      margin-bottom: 20px;\n    }\n    .ssr-info {\n      background: #e3f2fd;\n      padding: 15px;\n      border-radius: 4px;\n      margin-bottom: 20px;\n      border-left: 4px solid #2196f3;\n    }\n    .component-container {\n      margin: 20px 0;\n    }\n  </style>\n</head>\n<body>\n  <div class=\"container\">\n    <h1>Server-Side Rendered Lit Component</h1>\n    \n    <div class=\"ssr-info\">\n      <strong>üöÄ Server-Side Rendering Active</strong>\n      <p>This page was rendered on the server with the simple-greeting component. \n      The component's styles and initial content are immediately visible without \n      waiting for JavaScript to load.</p>\n    </div>\n\n    <div class=\"component-container\">\n      <h2>Simple Greeting Component (SSR'd):</h2>\n      <simple-greeting name=\"${name}\"></simple-greeting>\n    </div>\n\n    <div class=\"component-container\">\n      <h2>Interactive Version (after hydration):</h2>\n      <simple-greeting name=\"Hydrated ${name}\" id=\"interactive-greeting\"></simple-greeting>\n    </div>\n\n    <!-- Scripts for client-side hydration -->\n    <script type=\"module\">\n      // Polyfill for browsers without native declarative shadow root support\n      import {\n        hasNativeDeclarativeShadowRoots,\n        hydrateShadowRoots,\n      } from 'https://unpkg.com/@webcomponents/template-shadowroot@1.0.0/template-shadowroot.js';\n      \n      if (!hasNativeDeclarativeShadowRoots()) {\n        hydrateShadowRoots(document.body);\n      }\n      \n      // Load the component for client-side interactivity\n      import('./simple-greeting.js');\n      \n      // Example of updating the component after hydration\n      setTimeout(() => {\n        const greeting = document.getElementById('interactive-greeting');\n        if (greeting) {\n          greeting.name = 'Dynamically Updated!';\n        }\n      }, 2000);\n    </script>\n\n    <script type=\"text/json\" id=\"page-data\">\n      {\"name\": \"${name}\", \"timestamp\": \"${new Date().toISOString()}\"}\n    </script>\n  </div>\n</body>\n</html>`;\n\n/**\n * Simple HTTP server that serves SSR'd Lit components\n */\nconst server = http.createServer(async (req: http.IncomingMessage, res: http.ServerResponse) => {\n  const parsedUrl = url.parse(req.url || '', true);\n  const pathname = parsedUrl.pathname || '/';\n  \n  try {\n    if (pathname === '/') {\n      // Get name from query parameter or use default\n      const name = (parsedUrl.query.name as string) || 'World';\n      \n      // Render the page with SSR\n      const ssrResult = render(renderPage(name));\n      \n      // Set headers for streaming HTML\n      res.writeHead(200, {\n        'Content-Type': 'text/html; charset=utf-8',\n        'Transfer-Encoding': 'chunked',\n      });\n      \n      // Stream the result to the client\n      const readable = new RenderResultReadable(ssrResult);\n      readable.on('data', (chunk: any) => {\n        res.write(chunk);\n      });\n      readable.on('end', () => {\n        res.end();\n      });\n      readable.on('error', (error: Error) => {\n        console.error('Stream error:', error);\n        res.end();\n      });\n      \n    } else if (pathname === '/simple-greeting.js') {\n      // Serve the compiled component file\n      const filePath = path.join(process.cwd(), 'simple-greeting.js');\n      try {\n        const content = fs.readFileSync(filePath, 'utf8');\n        res.writeHead(200, {\n          'Content-Type': 'application/javascript; charset=utf-8',\n        });\n        res.end(content);\n      } catch (error) {\n        res.writeHead(404, {'Content-Type': 'text/plain'});\n        res.end('Component file not found. Please run \"npm run build\" first.');\n      }\n      \n    } else if (pathname === '/health') {\n      // Health check endpoint\n      res.writeHead(200, {'Content-Type': 'application/json'});\n      res.end(JSON.stringify({\n        status: 'ok',\n        timestamp: new Date().toISOString(),\n        ssr: 'enabled'\n      }));\n      \n    } else {\n      // 404 for other paths\n      res.writeHead(404, {'Content-Type': 'text/html'});\n      const notFoundResult = render(html`\n        <!DOCTYPE html>\n        <html>\n        <head><title>404 - Not Found</title></head>\n        <body>\n          <h1>404 - Page Not Found</h1>\n          <p>Try visiting <a href=\"/\">the home page</a> or <a href=\"/?name=YourName\">with a custom name</a></p>\n        </body>\n        </html>\n      `);\n      res.end(await collectResult(notFoundResult));\n    }\n  } catch (error) {\n    console.error('SSR Error:', error);\n    res.writeHead(500, {'Content-Type': 'text/html'});\n    res.end(`\n      <html>\n        <body>\n          <h1>Server Error</h1>\n          <p>An error occurred during server-side rendering.</p>\n          <pre>${error}</pre>\n        </body>\n      </html>\n    `);\n  }\n});\n\nconst PORT = process.env.PORT || 3000;\n\nserver.listen(PORT, () => {\n  console.log(`üöÄ SSR server running at http://localhost:${PORT}`);\n  console.log(`üìù Try different names: http://localhost:${PORT}/?name=Alice`);\n  console.log(`üè• Health check: http://localhost:${PORT}/health`);\n});\n\nexport { renderPage };"]}